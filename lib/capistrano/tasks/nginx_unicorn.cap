namespace :load do
  task :defaults do
    set :nginx_server_name, "web"
    set :nginx_use_ssl, false
    set :nginx_ssl_certificate, -> { "#{nginx_server_name}.crt" }
    set :nginx_ssl_certificate_key, -> { "#{nginx_server_name}.key" }
    set :nginx_upload_local_certificate, true
    set :nginx_ssl_certificate_local_path, -> { Capistrano::CLI.ui.ask "Local path to ssl certificate: " }
    set :nginx_ssl_certificate_key_local_path, -> { Capistrano::CLI.ui.ask "Local path to ssl certificate key: " }
  end
end

namespace :nginx do
  desc "Setup nginx configuration for this application"
  task :setup do
    on roles :web do |host|
      conf = template("nginx_conf.erb")
      p conf
      execute :sudo, :sh, "-c", "'echo #{conf} > /etc/nginx/nginx.conf'"
      
      site = template("nginx_site.erb")
      p site
      execute :sudo, :sh, "-c", "'echo #{site} > /etc/nginx/sites-available/#{fetch(:application)}'"
      execute :sudo, :ln, "-fs", "/etc/nginx/sites-available/#{fetch(:application)} /etc/nginx/sites-enabled/#{fetch(:application)}"
      
      if fetch(:nginx_use_ssl)
        if fetch(:nginx_upload_local_certificate)
          put File.read(fetch(:nginx_ssl_certificate_local_path)), "/tmp/#{fetch(:nginx_ssl_certificate)}"
          put File.read(fetch(:nginx_ssl_certificate_key_local_path)), "/tmp/#{fetch(:nginx_ssl_certificate_key)}"
          
          excute :sudo, :cp, "/tmp/#{fetch(:nginx_ssl_certificate)} /etc/ssl/certs/#{fetch(:nginx_ssl_certificate)}"
          excute :sudo, :cp, "/tmp/#{fetch(:nginx_ssl_certificate_key)} /etc/ssl/private/#{fetch(:nginx_ssl_certificate_key)}"
          excute :rm, "/tmp/#{fetch(:nginx_ssl_certificate)}"
          excute :rm, "/tmp/#{fetch(:nginx_ssl_certificate_key)}"
        end
      end
    end
  end
  
  desc "Reload nginx configuration"
  task :reload do
    on roles :web do |host|
      execute :sudo, "/etc/init.d/nginx reload"
    end
  end
  
  # after "deploy:finished", "nginx:setup"
  # after "deploy:finished", "nginx:reload"
end



def template(template_name)
  ERB.new(File.open(File.join(current_path, "lib/capistrano/templates", template_name))).result(binding)
end
