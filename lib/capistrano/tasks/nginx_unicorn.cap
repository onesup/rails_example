namespace :load do
  task :defaults do
    set :nginx_server_name, "web"
    set :nginx_use_ssl, false
    set :nginx_ssl_certificate, -> { "#{nginx_server_name}.crt" }
    set :nginx_ssl_certificate_key, -> { "#{nginx_server_name}.key" }
    set :nginx_upload_local_certificate, true
    set :nginx_ssl_certificate_local_path, -> { Capistrano::CLI.ui.ask "Local path to ssl certificate: " }
    set :nginx_ssl_certificate_key_local_path, -> { Capistrano::CLI.ui.ask "Local path to ssl certificate key: " }
  end
end

namespace :nginx do
  desc "Setup nginx configuration for this application"
  task :setup do
    on roles :web do |host|
      template "nginx_conf.erb", "/tmp/nginx.conf"
      execute :sudo, :cp, "/tmp/nginx.conf /etc/nginx/nginx.conf"
      execute :rm, "/tmp/nginx.conf"
      
      template "nginx_site.erb", "/tmp/nginx.#{fetch(:application)}"
      execute :sudo, :cp, "/tmp/nginx.#{fetch(:application)} /etc/nginx/sites-available/#{fetch(:application)}"
      execute :rm, "/tmp/nginx.#{fetch(:application)}"
      execute :sudo, :ln, "-fs", "/etc/nginx/sites-available/#{fetch(:application)} /etc/nginx/sites-enabled/#{fetch(:application)}"
      
      if fetch(:nginx_use_ssl)
        if fetch(:nginx_upload_local_certificate)
          upload! File.read(fetch(:nginx_ssl_certificate_local_path)), "/tmp/#{fetch(:nginx_ssl_certificate)}"
          upload! File.read(fetch(:nginx_ssl_certificate_key_local_path)), "/tmp/#{fetch(:nginx_ssl_certificate_key)}"
          
          execute :sudo, :cp, "/tmp/#{fetch(:nginx_ssl_certificate)} /etc/ssl/certs/#{fetch(:nginx_ssl_certificate)}"
          execute :sudo, :cp, "/tmp/#{fetch(:nginx_ssl_certificate_key)} /etc/ssl/private/#{fetch(:nginx_ssl_certificate_key)}"
          execute :rm, "/tmp/#{fetch(:nginx_ssl_certificate)}"
          execute :rm, "/tmp/#{fetch(:nginx_ssl_certificate_key)}"
        end
      end
    end
  end
  
  desc "Reload nginx configuration"
  task :reload do
    on roles :web do |host|
      execute :sudo, "/etc/init.d/nginx reload"
    end
  end
  
  # after "deploy:finished", "nginx:setup"
  # after "deploy:finished", "nginx:reload"
end



def template(template_name, target)
  config = File.read(File.join(File.dirname(__FILE__), "../templates", template_name))
  upload! StringIO.new(ERB.new(config).result(binding)), target
end
